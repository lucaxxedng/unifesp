TER√áA-FEIRA
7/3/2018
Voc√™ criou o grupo ‚ÄúSD - Airugly‚Äù
As mensagens que voc√™ enviar para este grupo s√£o protegidas com criptografia de ponta-a-ponta. Clique para mais informa√ß√µes.
Ai n sei quem eh o resto
08:19
Dani Crazy
Que nome.
09:03
Eu ia por arlixo kkk
09:12
8/3/2018
Dani Crazy alterou a imagem deste grupo
Dani Crazy
Pronto.
22:38
Kkkkkkkkk
22:38
Japa
KKKKKK
22:38
9/3/2018
Gente vcs tem as outras pessoas pra add ?
06:39
Japa
nop :I
09:15
Gente alguem leu o capitulo 2? Kk
07:22
architectural style -> componentes, como s√£o conectados uns aos outros, dados trocados entre arquiteturas. 

componente -> unidade modular bem definida que prov√™ interfaces que podem ser 
substituidas enquanto o sistema continua funcionando.

connector -> mecanismo que intermedia a comunica√ß√£o entre componentes (streaming, calls, rede, etc) 

Como os componentes e conectores s√£o distribuidos definem o modelo de arquitetura:

-> Em camadas
-> Orientada a Objeto
-> ' Resource-based'  (orientada a recurso?)
-> Orientada a evento

* Camadas: um componente fica embaixo do outro.. Pode ter pequenas camadas intermediarias
	- Comunica√ß√£o, servi√ßos e interfaces s√£o diferentes (pq ?)
Exemplo: servi√ßo de busca na internet 
	layer 1: interface do usuario
	layer 2: gerador de queries / HTML  (nivel de processamento) 
	layer 3: acesso ao DB

* Orientada a objeto: cada objeto corresponde a um componente. Encapsula o dados, 
prov√™ um 'proxy' de acesso ao cliente.  - Cliente-Servidor 
	- O objeto em si, seu estado √© n√£o distribu√≠do. Somente as interfaces 
	est√£o disponiveis em outras m√°quinas. A distribui√ß√£o fica escondida
	do cliente 

	- Separando os servi√ßos, temos SOA: Arquitetura orientada a servi√ßo


* Orientada a recurso: distribuir o sistema em uma cole√ß√£o de recursos. Exemplo: REST.
	- PUT: cria um recurso
	- GET: pega o estado do recurso 
 	- DELETE: deleta o recurso 
	- POST: modifica o recurso 
Exemplo: Amazon S3

* Publish-subscribe 
	-> processar e comunicar (coordenar)
	-> referencialmente acoplado/desacoplado  (precisa conhecer o outro ou n√£o)
	-> temporalmente acoplado/desacoplado (precisa ser ao mesmo tempo ou n√£o)
	-> tipos: direto, mailbox, orientado a evento, espa√ßo de dados compartilhado

Exemplos:
	-> direto: telefones
	-> mailbox: n√£o precisa se comunicar ao mesmo tempo 
	-> orientado a evento: inscri√ß√£o no youtube (voc√™ se inscreve e recebe uma 
		notifica√ß√£o de evento para aqueles que se inscreveram) 
		(referencialmente acoplado, temporalmente desacoplado)
	-> espa√ßo compartilhado: notifica grupos e filtra informa√ß√£o por palavras chave

- Middleware: dividido em wrapper e interceptors

	* Wrappers: Componente que oferece uma interface para a aplica√ß√£o do cliente, 
	resolvendo problemas de incompatibilidade. 
	
	* Interceptors: Software que vai quebrar um fluxo atual a ser executado.

	* Middlware modificavel: necessidade de alterar wrappers e interceptors.
	-> Design orientado a componentes 


- Arquiteturas de Sistemas 

	* Centralizados: Uma camada simples conectada a multiplas camadas 

	* Cliente-Servidor: um cliente requisita um servidor 
		-> interface, processamento e dados 

	* Peer-to-Peer: Distribui√ß√£o horizontal, divididos em partes que fazem as mesmas
	opera√ß√µes. 
		-> Estruturado: hash map para localizar os dados
		-> N√£o estruturado: grafo randomico -> encontrar dados por flooding,
		caminhos aleat√≥rios 
		-> Hierarquico: super peers acoplados a n√≥s menores

	* Arquiteturas h√≠bridas
		-> Edge-servers (borda): Exemplo: internet service provider,
		servi√ßos 
		-> Sistemas colaborativos distribuidos: exemplo: combinar arquiteturas
			centralizadas e descentralizadas - BitTorrente

- Exemplos
	- Network file Systems (NFS)
08:14
Japa
li ainda n√£o
09:14
eita, ce ja fez ate resumo?
09:14
Tava lendo agora no trabson
09:15
Dani Crazy
Muito bom, Thau.
09:15
Onde eh a aula
19:06
?
19:06
Japa
209
19:06
Tks
19:06
Japa
\o
19:06
9d2yvn
19:18
Codigo
19:18
Dani Crazy
Voc√™
9d2yvn
Valeu.
19:58
Japa
DH
20:28
T
20:28
E Pee to Pee
20:28
Pq tem uma etiqueta na camisa dele ?
20:28
Japa
Roubou
20:29
A C&
20:29
Dani Crazy
Voc√™
Pq tem uma etiqueta na camisa dele ?
Eu reparei nisso tamb√©m.
20:29
√â para n√£o perder com a dos coleguinhas.
20:29
Voc√™ adicionou Alexandre Hild
Bem vindo
21:08
Alexandre Hild
üòä
21:09
QUINTA-FEIRA
DISTRIBUTED HASH TABLE

-> Representa√ß√£o cl√°ssica: um identificador de m-bits assinado randomicamente a uma chave para identifica-lo. Geralmente
os bits s√£o 128 ou 160, dependendo da fun√ß√£o. Uma chave K fica sob um n√≥ com os menor id >= K.


Abordagem distribu√≠da: Cada n√≥ tem uma " finger table " contendo s <= m entradas. Ent√£o por exemplo, se o
identificador de bits √© 128, cada n√≥ precisa ter um n√∫mero de entradas <= 128. 

F√≥rmula: FT[i] = succ(p + 2^(i-1))   [nao entendirrrrr]

-> nao entendi como ele constr√≥i essa tabela

-> roteamento... inicia no n√≥ 1. Escolhe o n√≥ 18 porque √© o mais perto de 26? O que define os n√∫meros da esquerda? 

Resumo dehoje: nao entendi nada
08:47
Bruna
Partilho do seu n√£o entendimento...
08:56
Bruna
Partilho do seu n√£o entendimento...
üòÇ
üòÇ
üòÇ
08:57
Dani Crazy
Hehehe
09:15
Vou ler j√°j√°.
09:15
Alexandre Hild
Mat√©ria boa essa nossa
10:23
Ei gente algu√©m me manda por favor esse texto
10:24
n√£o tenho acesso ao moodle
10:24
Vc tem o livro?
10:26
√â do livro
10:26
Pags 246 a 251
10:26
Alexandre Hild
Afff ele n√£o ia separar um outro texto???
10:26
ü§∑üèª‚Äç‚ôÄ
ü§∑üèª‚Äç‚ôÄ
10:27
Alexandre Hild
Acho que precisamos fazer chamada oral √© com ele
10:27
Dani Crazy
Hehehehehe
11:18
Melhor n√£o, ele vai passar vergonha.
11:18
Japa
Corb
21:49
Voc√™ alterou o t√≠tulo para ‚ÄúSD - Arlind‚Äù
Alexandre Hild adicionou +55 11 98623-8911
Voc√™ adicionou Patricia
ONTEM
17:45
Alexandre Hild
HAHAHAHAHHAHAHAHAHAHAHAHAH
17:47
#TerraDonut
17:49
Japa
#Elementar
18:07
HOJE
Threads

Processo: o sistema operacional cria um processador virtual.
Cada processador tem uma tabela de processo que armazena informa√ß√µes 
da CPU, mem√≥ria, arquivos, etc. Tudo isso se chama contexto

Um processo √© definido como um programa em execu√ß√£o em um desses 
processadores.
-> Issue: processos rodando ao mesmo tempo. O SO tem que garantir que 
os processos sejam independentes entre si. 

Diferentente de processos, as threads buscam armazenar o m√≠nimo de informa√ß√£o
poss√≠vel pra aumentar a concorr√™ncia -> CPU conseguir compartilhar o maior 
numero de threads poss√≠vel. 

Desafios -> Desenvolver um sistema multi thread pois threads nao s√£o 
protegidas e podem causar problema de concorr√™ncia.

Vantagens -> Distribuir execu√ß√µes entre as threads (prevenir que processos 
fiquem bloqueados). Al√©m disso facilita a troca de contexto.

* Implementa√ß√£o 
	-> Opera√ß√µes de criar/destruir threads.
	-> Duas formas: usar uma library ou distribuir a fun√ß√£o para o kernel 
	
* Modelos

-> Many-To-One: muitas threads sao mapeadas para uma unica entidade. Entretanto, um bloqueio ira travar todo o processo. (user level)

-> One-To-One: Cada thread √© uma entidade. Cada opera√ß√£o necessita de uma chamada do sistema -> aumento no custo de troca de contexto.  (kernel level)

-> Many-To-Many: LWP (?) 

Vantagem de processos sobre thread: o processo reserva os dados para si. Grande desafio de se programar com threads: √© de total responsabilidade do desenvolver garantir que as threads vao compartilhar o espa√ßo corretamente.

* Threads em sistemas distribuidos 

-> Client multi thread 
	Exemplo: sistema web -> ir disponibilizando os dados na medida que sao
	carregados. 

-> Server multi thread 
	Exemplo: cada thread para gerenciar um request vindo do lado do cliente 

	* Modelos 
	- Multi thread -> paralelismo, bloqueia chamadas do sistema 
	- Single-thread -> sem paralelismo, bloqueia chamada do sistema 
	- Maquina de estado finitos -> paralelismo, nao bloqueia chamadas 

* Virtualiza√ß√£o 

	-> Troca de contextos podem ocorrer muito rapidamente em uma CPU, gerando a impress√£o que existe um sistema paralelo. A separa√ß√£o de ter uma √∫nica CPU e parecer que existe mais pode ser extendida a outros tipos de recurso: virtualiza√ß√£o. 
	
	* Principios
	-> Virtualiza√ß√£o trata de extender ou trocar interfaces existentes para parecer que existe mais de um sistema, se comportar como diferentes sistemas. 
	
	Vantagens 
	- Fazer o porting de sistemas legados (tratar as interfaces legado em novas plataformas) 
	- Escalabilidade: plataformas rodando seus pr√≥prios programas em suas m√°quinas virtuais ao mesmo tempo que se conectam em uma plataforma comum
	
	* Tipos de Virtualiza√ß√£o 
	
	Para entender os tipos, √© necessario entender as interfaces de um sistema computacional 
	
	1 - Interface entre o hardware e o software (conjunto de instru√ß√µes - privilegiados e gerais)
	2 - Interface de chamadas do sistema 
	3 - Interface consistindo de chamadas de libraries -> APIs 
	
	Virtualiza√ß√£o imita o comportamento dessas interfaces 
	
* Tipos 

	* Process Virtual Machine: ‚Ä¶ Ler mais
13:27
